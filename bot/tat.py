from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup, ParseMode
)
from telegram.ext import (
    Updater, CommandHandler, CallbackQueryHandler, CallbackContext, JobQueue
)
import threading
import random
import json
import os

def load_stats():
    if os.path.exists("player_stats.json"):
        with open("player_stats.json", "r") as f:
            return json.load(f)
    return {}

def save_stats(stats):
    with open("player_stats.json", "w") as f:
        json.dump(stats, f, indent=2)

TOKEN = '8160868856:AAG8XUDYboPUKuYL5V1-gah56LmRBZobYo4'

LOCATIONS = [
    "–ê–µ—Ä–æ–ø–æ—Ä—Ç", "–ö—ñ–Ω–æ—Ç–µ–∞—Ç—Ä", "–®–∫–æ–ª–∞", "–ü–ª—è–∂", "–†–µ—Å—Ç–æ—Ä–∞–Ω",
    "–ö–∞–∑–∏–Ω–æ", "–¶–∏—Ä–∫", "–ì–æ—Ç–µ–ª—å", "–ë–∞–Ω–∫", "–ü–æ–ª—ñ—Ü—ñ—è"
]

game_state = {
    'players': {},
    'is_running': False,
    'chat_id': None,
    'pinned_message_id': None,
    'votes': {},
    'vote_message_id': None,
    'stats_message_id': None,
    'discussion_message_id': None,
    'registration_job': None,
    'timer_job': None,
    'player_list_message_id': None,
    'vote_job': None,
    'time_left': 240,
    'reply_markup': None,
    'registration_started': False,
}

def start(update: Update, context: CallbackContext):
    update.message.reply_text(
        "–ü—Ä–∏–≤—ñ—Ç! –¶–µ –±–æ—Ç –¥–ª—è –≥—Ä–∏ Spyfall.\n\n"
        "–ö–æ–º–∞–Ω–¥–∏:\n"
        "/join ‚Äî –ø—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è –¥–æ –≥—Ä–∏\n"
        "/startgame ‚Äî –ø–æ—á–∞—Ç–∏ –≥—Ä—É\n"
        "/stopgame ‚Äî –∑—É–ø–∏–Ω–∏—Ç–∏ –≥—Ä—É\n"
        "/extend ‚Äî –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ —á–∞—Å\n"
        "/leave ‚Äî –≤–∏–π—Ç–∏ –∑ –≥—Ä–∏\n"
        "/moretime ‚Äî –¥–æ–¥–∞—Ç–∏ —â–µ 1 —Ö–≤–∏–ª–∏–Ω—É –¥–æ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó"
    )



def send_or_update_registration_message(update: Update, context: CallbackContext):
    chat_id = update.effective_chat.id
    players = game_state['players']
    time_left = game_state['time_left']

    player_names = [info['name'] for info in players.values()]
    players_text = "üì¢ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —Ç—Ä–∏–≤–∞—î!\n"
    players_text += "–ó–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ:\n" + "\n".join(f"- {name}" for name in player_names)
    players_text += f"\n\nüìã –£—Å—å–æ–≥–æ: {len(player_names)} –≥—Ä–∞–≤—Ü—ñ–≤"
    players_text += f"\n‚è≥ –î–æ —Å—Ç–∞—Ä—Ç—É –≥—Ä–∏ –∑–∞–ª–∏—à–∏–ª–æ—Å—å: {time_left} —Å–µ–∫—É–Ω–¥"

    button = InlineKeyboardButton("‚ûï –ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è", callback_data="join")
    markup = InlineKeyboardMarkup([[button]])

    if game_state['player_list_message_id']:
        try:
            context.bot.edit_message_text(
                chat_id=chat_id,
                message_id=game_state['player_list_message_id'],
                text=players_text,
                reply_markup=markup,
                parse_mode=ParseMode.MARKDOWN
            )
        except Exception as e:
            print(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó: {e}")
    else:
        msg = context.bot.send_message(
            chat_id=chat_id,
            text=players_text,
            reply_markup=markup,
            parse_mode=ParseMode.MARKDOWN
        )
        game_state['player_list_message_id'] = msg.message_id
        pin_message(context, chat_id, msg.message_id)

def registration_tick(context: CallbackContext):
    if not game_state['registration_started']:
        return

    game_state['time_left'] -= 10

    if game_state['time_left'] <= 0:
        context.job.schedule_removal()
        fake_message = type('FakeMessage', (), {'chat_id': game_state['chat_id']})
        fake_update = Update(update_id=0, message=fake_message)
        startgame(fake_update, context)
        return

    update_registration_message(context)
def join(update: Update, context: CallbackContext):
    user = update.effective_user
    user_id = user.id
    name = user.full_name

    if game_state['is_running']:
        update.message.reply_text("–ì—Ä–∞ –≤–∂–µ –ø–æ—á–∞–ª–∞—Å—è, –Ω–µ –º–æ–∂–Ω–∞ –ø—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è.")
        return

    if user_id in game_state['players']:
        update.message.reply_text("–¢–∏ –≤–∂–µ –≤ –≥—Ä—ñ.")
        return

    game_state['players'][user_id] = {'name': name, 'role': None, 'location': None}
    update.message.reply_text(f"{name} –ø—Ä–∏—î–¥–Ω–∞–≤—Å—è –¥–æ –≥—Ä–∏!")

    # –Ø–∫—â–æ –ø–µ—Ä—à–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è ‚Äî –∑–∞–ø—É—Å–∫–∞—î–º–æ —Ç–∞–π–º–µ—Ä
    if not game_state['registration_started']:
        game_state['registration_started'] = True
        game_state['chat_id'] = update.message.chat_id
        game_state['time_left'] = 60  # ‚è≥ —Ç–∞–π–º–µ—Ä —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
        game_state['timer_job'] = context.job_queue.run_repeating(registration_tick, 10, context=game_state['chat_id'])

    # –ù–∞–¥—Å–∏–ª–∞—î–º–æ/–æ–Ω–æ–≤–ª—é—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    send_or_update_registration_message(update, context)
def registration_button_callback(update: Update, context: CallbackContext):
    if update.callback_query.data == "join":
        update.callback_query.answer()
        update.message = update.callback_query.message
        join(update, context)

def pin_message(context: CallbackContext, chat_id, message_id):
    try:
        if game_state.get('pinned_message_id'):
            context.bot.unpin_chat_message(chat_id, game_state['pinned_message_id'])
        context.bot.pin_chat_message(chat_id, message_id)
        game_state['pinned_message_id'] = message_id
    except Exception as e:
        print(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–∫—Ä—ñ–ø–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")

def show_players_list(update: Update, context: CallbackContext):
    player_names = [info['name'] for info in game_state['players'].values()]
    players_text = "üì¢ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —Ç—Ä–∏–≤–∞—î!\n–ó–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ:\n" + "\n".join(f"- {name}" for name in player_names)
    players_text += f"\n\n–£—Å—å–æ–≥–æ {len(player_names)} –≥—Ä–∞–≤—Ü—ñ–≤."

    button = InlineKeyboardButton("‚ûï –ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è", callback_data="join")
    markup = InlineKeyboardMarkup([[button]])
    if game_state['player_list_message_id']:
        try:
            context.bot.edit_message_text(
                chat_id=update.effective_chat.id,
                message_id=game_state['player_list_message_id'],
                text=players_text,
                reply_markup=markup
            )
        except Exception as e:
            print(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")
    else:
        msg = context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=players_text,
            reply_markup=markup
        )
        game_state['player_list_message_id'] = msg.message_id
        pin_message(context, update.effective_chat.id, msg.message_id)

def moretime(update: Update, context: CallbackContext):
    if not game_state['registration_started']:
        update.message.reply_text("–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —â–µ –Ω–µ –ø–æ—á–∞–ª–∞—Å—å.")
        return

    game_state['time_left'] += 60  # –¥–æ–¥–∞—î–º–æ 1 —Ö–≤–∏–ª–∏–Ω—É
    update_registration_message(context)
    update.message.reply_text("‚è± –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–æ –Ω–∞ 1 —Ö–≤–∏–ª–∏–Ω—É!")

def startgame_auto(context: CallbackContext):
    chat_id = context.job.context
    message = type('FakeMessage', (), {'chat_id': chat_id})
    fake_update = Update(update_id=0, message=message)
    startgame(fake_update, context)

def leave(update: Update, context: CallbackContext):
    user = update.effective_user
    user_id = user.id
    if user_id in game_state['players']:
        name = game_state['players'][user_id]['name']
        del game_state['players'][user_id]
        update.message.reply_text(f"{name} –≤–∏–π—à–æ–≤ –∑ –≥—Ä–∏.")
    else:
        update.message.reply_text("–¢–∏ —â–µ –Ω–µ –≤ –≥—Ä—ñ.")
    if game_state['is_running'] and len(game_state['players']) == 1:
        finish_game(context)

def startgame(update: Update, context: CallbackContext, spy_count=1):
    if game_state['is_running']:
        context.bot.send_message(chat_id=update.message.chat_id, text="–ì—Ä–∞ –≤–∂–µ –π–¥–µ!")
        return
    if len(game_state['players']) < 2:
        context.bot.send_message(chat_id=update.message.chat_id, text="–ü–æ—Ç—Ä—ñ–±–Ω–æ –º—ñ–Ω—ñ–º—É–º 2 –≥—Ä–∞–≤—Ü—ñ.")
        return

    # ‚úÖ –ó—É–ø–∏–Ω—è—î–º–æ —Ç–∞–π–º–µ—Ä —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó, —è–∫—â–æ –±—É–≤
    game_state['registration_started'] = False
    if game_state['timer_job']:
        game_state['timer_job'].schedule_removal()
        game_state['timer_job'] = None

    game_state['is_running'] = True
    game_state['votes'].clear()
    game_state['time_left'] = 240

    players_ids = list(game_state['players'].keys())
    if spy_count >= len(players_ids):
        spy_count = max(1, len(players_ids) - 1)
    spy_ids = random.sample(players_ids, spy_count)
    location = random.choice(LOCATIONS)

    for pid in players_ids:
        if pid in spy_ids:
            game_state['players'][pid]['role'] = 'spy'
            game_state['players'][pid]['location'] = None
        else:
            game_state['players'][pid]['role'] = 'player'
            game_state['players'][pid]['location'] = location

    # üßæ –§–æ—Ä–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –≥—Ä–∞–≤—Ü—ñ–≤
    players_text = ""
    for pid, info in game_state['players'].items():
        players_text += f"{info['name']} ‚Äî 0 –≥–æ–ª–æ—Å—ñ–≤\n"

    discussion_text = (
        "üó£ –û–±–≥–æ–≤–æ—Ä–µ–Ω–Ω—è —Ç—Ä–∏–≤–∞—î!\n"
        f"‚è≥ –ß–∞—Å –∑–∞–ª–∏—à–∏–≤—Å—è: {game_state['time_left']} —Å–µ–∫—É–Ω–¥\n\n"
        "üë• –ì—Ä–∞–≤—Ü—ñ:\n"
        f"{players_text}\n"
        f"üìã –í—Å—å–æ–≥–æ {len(game_state['players'])} —É—á–∞—Å–Ω–∏–∫—ñ–≤"
    )

    button = InlineKeyboardButton("üîó –ü–µ—Ä–µ–π—Ç–∏ –≤ –±–æ—Ç", url="https://t.me/FamiliaAlDentebot")
    markup = InlineKeyboardMarkup([[button]])

    sent = context.bot.send_message(
        chat_id=update.message.chat_id,
        text=discussion_text,
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=markup
    )
    game_state['discussion_message_id'] = sent.message_id
    pin_message(context, update.message.chat_id, sent.message_id)

    # üïµÔ∏è –ü—Ä–∏–≤–∞—Ç–Ω—ñ —Ä–æ–ª—ñ
    for pid, info in game_state['players'].items():
        role_text = "–Ø —à–ø–∏–≥—É–Ω! ü§´" if info['role'] == 'spy' else f"–¢–≤–æ—è –ª–æ–∫–∞—Ü—ñ—è: {info['location']}"
        try:
            context.bot.send_message(chat_id=pid, text=role_text)
        except:
            context.bot.send_message(chat_id=update.message.chat_id, text=f"‚ö†Ô∏è {info['name']}, –¥–æ–∑–≤–æ–ª—å –±–æ—Ç—É –ø–∏—Å–∞—Ç–∏ —Ç–æ–±—ñ –≤ –æ—Å–æ–±–∏—Å—Ç—ñ.")

    # ‚è± –¢–∞–π–º–µ—Ä–∏
    game_state['timer_job'] = context.job_queue.run_repeating(timer_tick, 10, context=update.message.chat_id)

    # ‚úÖ –ì–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è –∑–∞ 20 —Å–µ–∫—É–Ω–¥ –¥–æ –∫—ñ–Ω—Ü—è
    vote_time = max(10, game_state['time_left'] - 20)
    game_state['vote_job'] = context.job_queue.run_once(start_voting, vote_time, context=update.message.chat_id)

def choose_spy_count(update: Update, context: CallbackContext):
    if game_state['is_running']:
        update.message.reply_text("–ì—Ä–∞ –≤–∂–µ –π–¥–µ!")
        return
    if len(game_state['players']) < 2:
        update.message.reply_text("–ü–æ—Ç—Ä—ñ–±–Ω–æ –º—ñ–Ω—ñ–º—É–º 2 –≥—Ä–∞–≤—Ü—ñ.")
        return

    buttons = [
        [InlineKeyboardButton("üïµÔ∏è –û–¥–∏–Ω —à–ø–∏–≥—É–Ω", callback_data="spy_1")],
        [InlineKeyboardButton("üïµÔ∏èüïµÔ∏è –î–≤–∞ —à–ø–∏–≥—É–Ω–∞", callback_data="spy_2")]
    ]
    markup = InlineKeyboardMarkup(buttons)
    update.message.reply_text("–°–∫—ñ–ª—å–∫–∏ –º–∞—î –±—É—Ç–∏ —à–ø–∏–≥—É–Ω—ñ–≤?", reply_markup=markup)

def spy_count_callback(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()
    spy_count = int(query.data.split("_")[1])
    query.message.delete()
    fake_message = type('FakeMessage', (), {'chat_id': query.message.chat_id})
    fake_update = Update(update_id=0, message=fake_message)
    startgame(fake_update, context, spy_count=spy_count)

def start_voting(context: CallbackContext):
    if not game_state['is_running']:
        return  # ‚õî –Ø–∫—â–æ –≥—Ä–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—Ç —Ä–∞–Ω–æ
    chat_id = context.job.context
    vote_buttons = []
    for pid, info in game_state['players'].items():
        vote_buttons.append([InlineKeyboardButton(info['name'], callback_data=f"vote_{pid}")])
    vote_buttons.append([InlineKeyboardButton("+30 —Å–µ–∫—É–Ω–¥", callback_data="extend_30")])
    markup = InlineKeyboardMarkup(vote_buttons)
    vote_message = context.bot.send_message(
        chat_id=chat_id,
        text="üó≥ –ì–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è ‚Äî –≤–∏–±–µ—Ä—ñ—Ç—å, –∫–æ–≥–æ –ª—ñ–Ω—á—É–≤–∞—Ç–∏:",
        reply_markup=markup
    )
    pin_message(context, chat_id, vote_message.message_id)
    game_state['vote_message_id'] = vote_message.message_id
    game_state['reply_markup'] = markup

def vote_callback(update: Update, context: CallbackContext):
    query = update.callback_query
    voter_id = query.from_user.id
    data = query.data

    if not game_state['is_running']:
        query.answer("–ì—Ä–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞.")
        return

    if data == "extend_30":
        game_state['time_left'] += 30
        query.answer("‚è± –ß–∞—Å –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–æ –Ω–∞ 30 —Å–µ–∫—É–Ω–¥!")
        return

    if not data.startswith("vote_"):
        query.answer()
        return

    target_id = int(data.split("_")[1])

    if target_id == voter_id:
        query.answer("–ù–µ –º–æ–∂–Ω–∞ –≥–æ–ª–æ—Å—É–≤–∞—Ç–∏ –∑–∞ —Å–µ–±–µ.")
        return

    if target_id not in game_state['players']:
        query.answer("–ì—Ä–∞–≤–µ—Ü—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π.")
        return

    game_state['votes'][voter_id] = target_id

    voted_name = game_state['players'][target_id]['name']
    query.answer(f"–¢–∏ –ø—Ä–æ–≥–æ–ª–æ—Å—É–≤–∞–≤ –∑–∞ {voted_name}")

    # üîÅ –û–Ω–æ–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –æ–±–≥–æ–≤–æ—Ä–µ–Ω–Ω—è –ø—ñ—Å–ª—è –∫–æ–∂–Ω–æ–≥–æ –≥–æ–ª–æ—Å—É
    update_discussion_message(context)

    # üîö –Ø–∫—â–æ –±—ñ–ª—å—à–µ –ø–æ–ª–æ–≤–∏–Ω–∏ –≤–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å—É–≤–∞–ª–∏ ‚Äî –∑–∞–∫—ñ–Ω—á—É—î–º–æ –≥—Ä—É
    if len(game_state['votes']) > len(game_state['players']) // 2:
        finish_game(context)
def timer_tick(context: CallbackContext):
    chat_id = context.job.context

    if not game_state['is_running']:
        context.job.schedule_removal()
        return

    game_state['time_left'] -= 10

    if game_state['time_left'] <= 0:
        finish_game(context)
        return

    # üîÅ –û–Ω–æ–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –æ–±–≥–æ–≤–æ—Ä–µ–Ω–Ω—è (—ñ–∑ –≥–æ–ª–æ—Å–∞–º–∏ —Ç–∞ —á–∞—Å–æ–º)
    update_discussion_message(context)

def update_discussion_message(context: CallbackContext):
    chat_id = game_state['chat_id']
    time_left = game_state['time_left']
    players = game_state['players']
    votes = game_state['votes']

    # –ì–æ–ª–æ—Å–∏: {target_id: [–≤—ñ–¥_–∫–æ–≥–æ1, –≤—ñ–¥_–∫–æ–≥–æ2]}
    vote_map = {}
    for voter_id, target_id in votes.items():
        vote_map.setdefault(target_id, []).append(voter_id)

    players_text = ""
    for pid, info in players.items():
        name = info['name']
        vote_count = len(vote_map.get(pid, []))
        voters = vote_map.get(pid, [])
        voters_names = [players[vid]['name'] for vid in voters]
        if voters_names:
            players_text += f"{name} ‚Äî {vote_count} –≥–æ–ª–æ—Å—ñ–≤ (–≤—ñ–¥ {', '.join(voters_names)})\n"
        else:
            players_text += f"{name} ‚Äî 0 –≥–æ–ª–æ—Å—ñ–≤\n"

    discussion_text = (
        "üó£ –û–±–≥–æ–≤–æ—Ä–µ–Ω–Ω—è —Ç—Ä–∏–≤–∞—î!\n"
        f"‚è≥ –ß–∞—Å –∑–∞–ª–∏—à–∏–≤—Å—è: {time_left} —Å–µ–∫—É–Ω–¥\n\n"
        "üë• –ì—Ä–∞–≤—Ü—ñ:\n"
        f"{players_text}\n"
        f"üìã –í—Å—å–æ–≥–æ {len(players)} —É—á–∞—Å–Ω–∏–∫—ñ–≤"
    )

    button = InlineKeyboardButton("üîó –ü–µ—Ä–µ–π—Ç–∏ –≤ –±–æ—Ç", url="https://t.me/FamiliaAlDentebot")
    markup = InlineKeyboardMarkup([[button]])

    try:
        context.bot.edit_message_text(
            chat_id=chat_id,
            message_id=game_state['discussion_message_id'],
            text=discussion_text,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=markup
        )
    except Exception as e:
        print(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –æ–±–≥–æ–≤–æ—Ä–µ–Ω–Ω—è: {e}")   

def finish_game(context: CallbackContext):
    if not game_state['is_running']:
        return

    chat_id = game_state['chat_id']

    vote_tally = {}
    for target_id in game_state['votes'].values():
        vote_tally[target_id] = vote_tally.get(target_id, 0) + 1

    lynched_id = max(vote_tally, key=vote_tally.get) if vote_tally else None
    spy_id = next((pid for pid, info in game_state['players'].items() if info['role'] == 'spy'), None)

    if lynched_id is None:
        text = "‚è∞ –ß–∞—Å –≤–∏–π—à–æ–≤! –ù—ñ—Ö—Ç–æ –Ω–µ –±—É–≤ –ª—ñ–Ω—á–µ–Ω–∏–π.\n"
    else:
        lynched_name = game_state['players'][lynched_id]['name']
        text = f"‚è∞ –ß–∞—Å –≤–∏–π—à–æ–≤!\n\nüë• –õ—ñ–Ω—á—É–≤–∞–ª–∏ ‚Äî [{lynched_name}](tg://user?id={lynched_id}).\n"

    spy_name = game_state['players'][spy_id]['name']
    text += f"üïµÔ∏è‚Äç‚ôÇÔ∏è –®–ø–∏–≥—É–Ω ‚Äî [{spy_name}](tg://user?id={spy_id})!\n\nüéâ –î—è–∫—É—î–º–æ –∑–∞ –≥—Ä—É! –ë—É–ª–æ üî• "

    context.bot.send_message(chat_id=chat_id, text=text, parse_mode=ParseMode.MARKDOWN)
    try:
       context.bot.unpin_chat_message(chat_id, game_state['pinned_message_id'])
    except:
        pass
    stats = load_stats()
    for pid, info in game_state['players'].items():
        pid = str(pid)
        if pid not in stats:
            stats[pid] = {
                "name": info['name'],
                "games_played": 0,
                "spy_wins": 0
            }
        stats[pid]['games_played'] += 1
        if info['role'] == 'spy' and pid == str(spy_id):
            stats[pid]['spy_wins'] += 1
    save_stats(stats)
    game_state['is_running'] = False
    game_state['players'].clear()
    game_state['votes'].clear()
    game_state['player_list_message_id'] = None
    game_state['vote_message_id'] = None
    game_state['discussion_message_id'] = None
    game_state['chat_id'] = None
    game_state['reply_markup'] = None
    game_state['time_left'] = 240
    game_state['registration_started'] = False

def stopgame(update: Update, context: CallbackContext):
    if not game_state['is_running']:
        update.message.reply_text("–ì—Ä–∞ –Ω–µ –π–¥–µ.")
        return

    game_state['is_running'] = False
    game_state['players'].clear()
    game_state['votes'].clear()
    game_state['vote_message_id'] = None
    game_state['discussion_message_id'] = None
    game_state['chat_id'] = None
    game_state['reply_markup'] = None
    game_state['time_left'] = 240
    game_state['registration_started'] = False

    update.message.reply_text("–ì—Ä—É –∑—É–ø–∏–Ω–µ–Ω–æ.")
def show_help(update: Update, context: CallbackContext):
    update.message.reply_text(
        "üïµÔ∏è‚Äç‚ôÇÔ∏è *Spyfall ‚Äî –ø—Ä–∞–≤–∏–ª–∞ –≥—Ä–∏:*\n"
        "‚Ä¢ –û–¥–∏–Ω —ñ–∑ –≤–∞—Å ‚Äî *—à–ø–∏–≥—É–Ω* (–Ω–µ –∑–Ω–∞—î –ª–æ–∫–∞—Ü—ñ—é).\n"
        "‚Ä¢ –Ü–Ω—à—ñ ‚Äî *–≥—Ä–∞–≤—Ü—ñ* (–∑–Ω–∞—é—Ç—å –ª–æ–∫–∞—Ü—ñ—é).\n"
        "‚Ä¢ –ú–µ—Ç–∞ –≥—Ä–∞–≤—Ü—ñ–≤ ‚Äî –∑–Ω–∞–π—Ç–∏ —à–ø–∏–≥—É–Ω–∞, —à–ø–∏–≥—É–Ω–∞ ‚Äî –Ω–µ –≤–∏–¥–∞—Ç–∏ —Å–µ–±–µ.\n\n"
        "üéô *–û–±–≥–æ–≤–æ—Ä–µ–Ω–Ω—è:*\n"
        "‚Ä¢ –Ü–¥–µ—Ç–µ –ø–æ —Å–ø–∏—Å–∫—É –∑–≤–µ—Ä—Ö—É –≤–Ω–∏–∑.\n"
        "‚Ä¢ –ö–æ–∂–µ–Ω –∑–∞–¥–∞—î 1 –ø–∏—Ç–∞–Ω–Ω—è –Ω–∞—Å—Ç—É–ø–Ω–æ–º—É –≥—Ä–∞–≤—Ü—é.\n"
        "‚Ä¢ –ü–∏—Ç–∞–Ω–Ω—è ‚Äî –∑–∞–≥–∞–ª—å–Ω—ñ, –±–µ–∑ –∑–≥–∞–¥—É–≤–∞–Ω–Ω—è —Å–∞–º–æ—ó –ª–æ–∫–∞—Ü—ñ—ó.\n\n"
        "üß† –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π –æ–±–µ—Ä–µ–∂–Ω–æ.\n"
        "üó≥ –ó–∞ 10 —Å–µ–∫—É–Ω–¥ –¥–æ –∫—ñ–Ω—Ü—è –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è ‚Äî *—à–≤–∏–¥–∫–æ –Ω–∞—Ç–∏—Å–Ω–∏ –Ω–∞ –≥—Ä–∞–≤—Ü—è*, —è–∫–æ–≥–æ –ø—ñ–¥–æ–∑—Ä—é—î—à.",
        parse_mode=ParseMode.MARKDOWN
    )


def show_stats(update: Update, context: CallbackContext):
    stats = load_stats()
    if not stats:
        update.message.reply_text("üìâ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —â–µ –ø–æ—Ä–æ–∂–Ω—è.")
        return

    sorted_stats = sorted(stats.items(), key=lambda x: x[1]['games_played'], reverse=True)

    text = "üèÜ *–¢–æ–ø –≥—Ä–∞–≤—Ü—ñ–≤ —Ü—å–æ–≥–æ —á–∞—Ç—É:*\n"
    for i, (pid, data) in enumerate(sorted_stats[:10], 1):
        name = data['name']
        games = data['games_played']
        wins = data['spy_wins']
        text += f"{i}. {name} ‚Äî üéÆ {games} —ñ–≥–æ—Ä | üïµÔ∏è {wins} –ø–µ—Ä–µ–º–æ–≥ —à–ø–∏–≥—É–Ω–æ–º\n"

    if 'stats_message_id' in game_state:
        try:
            context.bot.edit_message_text(
                chat_id=update.effective_chat.id,
                message_id=game_state['stats_message_id'],
                text=text,
                parse_mode=ParseMode.MARKDOWN
            )
            return
        except:
            pass

    msg = update.message.reply_text(text, parse_mode=ParseMode.MARKDOWN)
    game_state['stats_message_id'] = msg.message_id

    update.message.reply_text(text, parse_mode=ParseMode.MARKDOWN)
def update_registration_message(context: CallbackContext):
    chat_id = game_state['chat_id']
    players = game_state['players']
    time_left = game_state['time_left']

    player_names = [info['name'] for info in players.values()]
    players_text = "üì¢ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —Ç—Ä–∏–≤–∞—î!\n"
    players_text += "–ó–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ:\n" + "\n".join(f"- {name}" for name in player_names)
    players_text += f"\n\nüìã –£—Å—å–æ–≥–æ: {len(player_names)} –≥—Ä–∞–≤—Ü—ñ–≤"
    players_text += f"\n‚è≥ –î–æ —Å—Ç–∞—Ä—Ç—É –≥—Ä–∏ –∑–∞–ª–∏—à–∏–ª–æ—Å—å: {time_left} —Å–µ–∫—É–Ω–¥"

    button = InlineKeyboardButton("‚ûï –ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è", callback_data="join")
    markup = InlineKeyboardMarkup([[button]])

    try:
        context.bot.edit_message_text(
            chat_id=chat_id,
            message_id=game_state['player_list_message_id'],
            text=players_text,
            reply_markup=markup,
            parse_mode=ParseMode.MARKDOWN
        )
    except Exception as e:
        print(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó: {e}")
def extend(update: Update, context: CallbackContext):
    if not game_state['is_running']:
        update.message.reply_text("–ì—Ä–∞ —â–µ –Ω–µ –ø–æ—á–∞–ª–∞—Å—è –∞–±–æ –≤–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
        return

    game_state['time_left'] += 30
    update.message.reply_text("‚è± –ß–∞—Å –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–æ –Ω–∞ 30 —Å–µ–∫—É–Ω–¥!")
def main():
    updater = Updater(TOKEN, use_context=True)
    dp = updater.dispatcher
    dp.add_handler(CommandHandler('start', start))
    dp.add_handler(CommandHandler('join', join))
    dp.add_handler(CommandHandler('stopgame', stopgame))
    dp.add_handler(CommandHandler('extend', extend))
    dp.add_handler(CommandHandler('leave', leave))
    dp.add_handler(CommandHandler('selectspy', choose_spy_count))
    dp.add_handler(CommandHandler('startgame', lambda u, c: startgame(u, c, spy_count=1)))
    dp.add_handler(CommandHandler('help', show_help))
    dp.add_handler(CommandHandler('stats', show_stats))
    dp.add_handler(CommandHandler('moretime', moretime))
    dp.add_handler(CallbackQueryHandler(spy_count_callback, pattern=r'^spy_'))
    dp.add_handler(CallbackQueryHandler(vote_callback, pattern=r'^vote_'))
    dp.add_handler(CallbackQueryHandler(registration_button_callback))
    dp.add_handler(CallbackQueryHandler(vote_callback))  # –ø–æ–≤—Ç–æ—Ä–Ω–æ, —è–∫—â–æ —Ç—Ä–µ–±–∞ –±–µ–∑ pattern

    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()